# Generated by Django 3.2.13 on 2022-04-20 17:24

from functools import reduce

import random
from django.db import migrations, transaction
import csv
from vehicle.models import Vehicle
from geopy.geocoders import Nominatim
from unicodedata import normalize

# Nos permite hacer la lectura del csv e iterar sus filas
@transaction.atomic
def import_csv(apps,schema_editor):
    townhalls=["Azcapotzalco","Álvaro Obregón","Benito Juárez","Coyoacán","Cuajimalpa de Morelos",
               "Cuauhtémoc","Gustavo A. Madero","Iztacalco","Iztapalapa","Magdalena Contreras"
               ,"Miguel Hidalgo","Milpa Alta","Tlahuac","Tlalpan","Venustiano Carranza","Xochimilco"]
    result=[]
    Vehicles= apps.get_model('vehicle','Vehicle')
    Towns= apps.get_model('townhall','Town')
    with open('metrobus.csv') as database_file:
        reader = csv.reader(database_file)
        next(reader, None)
        data = [row for row in reader]
        cont=0
        towns=[]
        # Valida si la latitud es invalida y nos impida optener la información 
        # si es asi elimina el dato
        while cont < len(data):
            print(cont)
            if data[cont][3]=="0.0"or data[cont][3]=="0":
                del data[cont] 
            else:
                address=geolocation(data[cont][5])
                towns.append(address)
                cont+=1        
        for x in range(len(towns)):
            for j in range(5):
              if towns[x][j] in townhalls:  
                  result.append(towns[x][j])
                  

        for row, loc in zip(data,result):
            row.append(loc)
            if row[10]=='':
                row[10]=0
            if row[11]=='':
                row[11]=0
            if row[8]=='':
                row[8]=str(random.randint(9765600,9800000))
            vehicle_obj={
                'id': row[0],
                'vehicle_label': int(row[1]),
                'vehicle_current_status':row[2],
                'position_latitude': float(row[3]),
                'position_longitude': float(row[4]),
                'geographic_point': row[5],
                'position_speed': row[6],
                'position_odometer': row[7],
                'trip_id':row[8],
                'trip_schedule_relationship':row[9],
                'trip_route':row[10],
                'trip_start_date':row[11],
                'town_hall':row[12]
            }         
            vehicule_res= Vehicle.objects.create(**vehicle_obj)  
            vehicule_res.save()   
           
    # print(reduce(lambda x,y: str(x)+str(y), map(lambda x: random.randint(1,9), range(9,num))))

# Funnción para la conversion de geoposition y nos de la dirección correcta  
def geolocation(x):
    geolocator = Nominatim(user_agent='Metrobus',timeout=10)
    location = geolocator.reverse(x)
    result=location.address.split(', ')
    return result 


def reverse(*_):
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('vehicle', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(import_csv, reverse)
    ]
